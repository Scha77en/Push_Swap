{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "text",
      "version": 886,
      "versionNonce": 2139736831,
      "isDeleted": false,
      "id": "ap_RFXOpEbcWRqLpFMsLh",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 374.2075056010049,
      "y": -553.4631696428573,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 364.8797742616413,
      "height": 382.18906146570396,
      "seed": 1557236153,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.847429763250144,
      "fontFamily": 3,
      "text": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint main ()\n{\n    FILE        *fp;\n\n// If a file is opened which does not exist,\n// then it will be an error and corresponding\n// errno value will be set\n    fp = fopen(\" GeeksForGeeks.txt \", \"r\");\n  \n// opening a file which does\n// not exist.\n    printf(\"Value of errno: %d\\n \", errno);\n    printf(\"The error message is : %s\\n\", \n                         strerror(errno));\n    perror(\"Message from perror\");\n \n    return 0;\n}\n",
      "baseline": 379.18906146570396,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint main ()\n{\n    FILE        *fp;\n\n// If a file is opened which does not exist,\n// then it will be an error and corresponding\n// errno value will be set\n    fp = fopen(\" GeeksForGeeks.txt \", \"r\");\n  \n// opening a file which does\n// not exist.\n    printf(\"Value of errno: %d\\n \", errno);\n    printf(\"The error message is : %s\\n\", \n                         strerror(errno));\n    perror(\"Message from perror\");\n \n    return 0;\n}\n"
    },
    {
      "type": "text",
      "version": 447,
      "versionNonce": 1863034993,
      "isDeleted": false,
      "id": "4aopJ5uZJK8_aSwu8ptLR",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 96.28129525162437,
      "y": -148.2198855757627,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 844.0008440700962,
      "height": 83.08457857950087,
      "seed": 1122361753,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.847429763250144,
      "fontFamily": 3,
      "text": "Error Handling in C programs  \n\n    there are ways through which error handling can be done in C.\n        A programmer has to prevent errors at the first place and test return values from the functions.\n",
      "baseline": 80.08457857950087,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Error Handling in C programs  \n\n    there are ways through which error handling can be done in C.\n        A programmer has to prevent errors at the first place and test return values from the functions.\n"
    },
    {
      "type": "text",
      "version": 611,
      "versionNonce": 389419807,
      "isDeleted": false,
      "id": "Ff830GiO4Dx_PuMmkDzEd",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 17.79269303495212,
      "y": -41.22234641877424,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 1054.4817764714985,
      "height": 66.46766286360068,
      "seed": 960484377,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.847429763250144,
      "fontFamily": 3,
      "text": "Global Variable errno: When a function is called in C, a variable named as errno is automatically\n            assigned a code (value)which can be used to identify the type of error that has been encountered.\n                      Its a global variable indicating the error occurred during any function call and defined in the header file \nerrno.h.",
      "baseline": 63.46766286360068,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Global Variable errno: When a function is called in C, a variable named as errno is automatically\n            assigned a code (value)which can be used to identify the type of error that has been encountered.\n                      Its a global variable indicating the error occurred during any function call and defined in the header file \nerrno.h."
    },
    {
      "type": "line",
      "version": 467,
      "versionNonce": 759132753,
      "isDeleted": false,
      "id": "Ijs0P5x_I6pnga9plAd-q",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 152.5004176498201,
      "y": -25.152093152268435,
      "strokeColor": "#5f3dc4",
      "backgroundColor": "transparent",
      "width": 171.8983509184714,
      "height": 0.5859914938875123,
      "seed": 355951705,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          84.93045178524662,
          0.5859914938875123
        ],
        [
          171.8983509184714,
          0
        ]
      ]
    },
    {
      "type": "line",
      "version": 653,
      "versionNonce": 1583634239,
      "isDeleted": false,
      "id": "2lZ1iKs6OPtitkxK1GE1c",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 396.18723419639105,
      "y": -129.99498666250128,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 231.29985789116355,
      "height": 0.5859914938875123,
      "seed": 900332953,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          84.93045178524662,
          0.5859914938875123
        ],
        [
          231.29985789116355,
          0.5859914938875123
        ]
      ]
    },
    {
      "type": "text",
      "version": 502,
      "versionNonce": 1780416561,
      "isDeleted": false,
      "id": "y77UO-O6vz2D7d5PwktlY",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 261.1774668443902,
      "y": 226.99913280362875,
      "strokeColor": "#5f3dc4",
      "backgroundColor": "transparent",
      "width": 625.2114538107439,
      "height": 33.23383143180034,
      "seed": 1114677785,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.847429763250144,
      "fontFamily": 3,
      "text": "Different codes (values) for errno mean different types of errors.\n Below is a list of few different errno values and its corresponding meaning:",
      "baseline": 30.23383143180034,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Different codes (values) for errno mean different types of errors.\n Below is a list of few different errno values and its corresponding meaning:"
    },
    {
      "type": "text",
      "version": 1013,
      "versionNonce": 192223071,
      "isDeleted": false,
      "id": "61gU7UlNCEvuyqM7-qmsi",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 168.9394400828371,
      "y": 282.88584989184983,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 657.0605422662193,
      "height": 232.6368200226024,
      "seed": 44307671,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.847429763250144,
      "fontFamily": 3,
      "text": "errno value       Error\n                        1                 /* Operation not permitted */\n                          2                 /* No such file or directory */\n                3                 /* No such process */\n                        4                 /* Interrupted system call */\n                             5                 /* I/O error */.                  \n                          6                 /* No such device or address */\n                       7                 /* Argument list too long */\n                  8                 /* Exec format error */\n                9                 /* Bad file number */\n                   10                /* No child processes */\n          11                /* Try again */\n              12                /* Out of memory */\n                  13                /* Permission denied */",
      "baseline": 229.6368200226024,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "errno value       Error\n                        1                 /* Operation not permitted */\n                          2                 /* No such file or directory */\n                3                 /* No such process */\n                        4                 /* Interrupted system call */\n                             5                 /* I/O error */.                  \n                          6                 /* No such device or address */\n                       7                 /* Argument list too long */\n                  8                 /* Exec format error */\n                9                 /* Bad file number */\n                   10                /* No child processes */\n          11                /* Try again */\n              12                /* Out of memory */\n                  13                /* Permission denied */"
    },
    {
      "type": "text",
      "version": 1214,
      "versionNonce": 1670500881,
      "isDeleted": false,
      "id": "aWTTDHhZwFuM--pCHaNon",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 270.95907724212293,
      "y": 1469.584787277061,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 611.5908588376014,
      "height": 46.94514055043423,
      "seed": 497917911,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "errno.h is a header file in the standard library of the C programming language.\nIt defines macros for reporting and retrieving error conditions using the symbol\n errno (short for \"error number\").",
      "baseline": 43.94514055043423,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "errno.h is a header file in the standard library of the C programming language.\nIt defines macros for reporting and retrieving error conditions using the symbol\n errno (short for \"error number\")."
    },
    {
      "type": "text",
      "version": 874,
      "versionNonce": 884527999,
      "isDeleted": false,
      "id": "TcFCRjAVXosCrOxNK00-_",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 524.5596819082409,
      "y": 1435.8382559696252,
      "strokeColor": "#5f3dc4",
      "backgroundColor": "transparent",
      "width": 72.73547886369592,
      "height": 21.031945695526527,
      "seed": 1123194809,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 17.526621412938777,
      "fontFamily": 3,
      "text": "errno.h",
      "baseline": 17.031945695526527,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "errno.h"
    },
    {
      "type": "text",
      "version": 908,
      "versionNonce": 781150193,
      "isDeleted": false,
      "id": "vVFcMM0HLOvd1NyzTk5of",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 215.8764733638543,
      "y": 1549.0661974754776,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 688.5287280730354,
      "height": 78.2419009173904,
      "seed": 1908544183,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "An errno can be translated to a descriptive string using strerror (defined in string.h)\n    or a BSD extension called sys_errlist. The translation can be printed directly to the \n    standard error stream using perror (defined in stdio.h). As strerror in many Unix-like\n    systems is not thread-safe, a thread-safe version strerror_r is used, but conflicting\n    definitions from POSIX and GNU makes it even less portable than the sys_errlist table.",
      "baseline": 75.2419009173904,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "An errno can be translated to a descriptive string using strerror (defined in string.h)\n    or a BSD extension called sys_errlist. The translation can be printed directly to the \n    standard error stream using perror (defined in stdio.h). As strerror in many Unix-like\n    systems is not thread-safe, a thread-safe version strerror_r is used, but conflicting\n    definitions from POSIX and GNU makes it even less portable than the sys_errlist table."
    },
    {
      "type": "line",
      "version": 874,
      "versionNonce": 1383074719,
      "isDeleted": false,
      "id": "_dVDWYxWpiIHxx7_9AYFt",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 651.6930304464827,
      "y": 1564.772308228209,
      "strokeColor": "#364fc7",
      "backgroundColor": "transparent",
      "width": 64.60729882610039,
      "height": 0,
      "seed": 364893017,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          64.60729882610039,
          0
        ]
      ]
    },
    {
      "type": "line",
      "version": 3323,
      "versionNonce": 1428111825,
      "isDeleted": false,
      "id": "sgJaz6wd3yfAsWQkQ1hHO",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 446.1637141151998,
      "y": 1582.8003764354662,
      "strokeColor": "#364fc7",
      "backgroundColor": "transparent",
      "width": 82.79667303568243,
      "height": 0.5306118497543885,
      "seed": 1585008633,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          82.79667303568243,
          -0.5306118497543885
        ]
      ]
    },
    {
      "type": "line",
      "version": 3540,
      "versionNonce": 13320127,
      "isDeleted": false,
      "id": "X3xtboyLo1yFwHtjKwFcK",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 455.8038702015383,
      "y": 1597.840038704906,
      "strokeColor": "#364fc7",
      "backgroundColor": "transparent",
      "width": 51.90232869558004,
      "height": 0,
      "seed": 23909783,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "startBinding": null,
      "endBinding": null,
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": null,
      "points": [
        [
          0,
          0
        ],
        [
          51.90232869558004,
          0
        ]
      ]
    },
    {
      "type": "text",
      "version": 906,
      "versionNonce": 878239665,
      "isDeleted": false,
      "id": "jHyeqcRGbNhzqzWaoj0jE",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 338.38583519307826,
      "y": 1655.2819551119223,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 84.7620593271729,
      "height": 15.648380183478077,
      "seed": 1461807287,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "strerror : ",
      "baseline": 12.648380183478077,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "strerror : "
    },
    {
      "type": "text",
      "version": 699,
      "versionNonce": 32174047,
      "isDeleted": false,
      "id": "OPuEa6HPt_IRcnsw4tJYV",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 424.3237303793071,
      "y": 1655.3753427974793,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 497.4880866664072,
      "height": 15.648380183478077,
      "seed": 1302859031,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "Returns a string containing a message derived from an error code.",
      "baseline": 12.648380183478077,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Returns a string containing a message derived from an error code."
    },
    {
      "type": "text",
      "version": 956,
      "versionNonce": 442745233,
      "isDeleted": false,
      "id": "UCHpGft-z-LJDG0J1STVa",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 244.67553763164653,
      "y": 1654.4287312575175,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 92.58624941891195,
      "height": 15.648380183478077,
      "seed": 1949445527,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "Byte string/",
      "baseline": 12.648380183478077,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Byte string/"
    },
    {
      "type": "text",
      "version": 1165,
      "versionNonce": 2145360895,
      "isDeleted": false,
      "id": "BlIe4BoAO0RQlbcO5HV7J",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 0,
      "opacity": 100,
      "angle": 0,
      "x": 56.55877976190516,
      "y": 1692.3186622247827,
      "strokeColor": "#d9480f",
      "backgroundColor": "transparent",
      "width": 183.8684671558674,
      "height": 15.648380183478077,
      "seed": 1397551639,
      "groupIds": [],
      "strokeSharpness": "round",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "Formatted input/output /",
      "baseline": 12.648380183478077,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Formatted input/output /"
    },
    {
      "type": "text",
      "version": 963,
      "versionNonce": 611805041,
      "isDeleted": false,
      "id": "dUn4bIOzyvXl4jRIaccLi",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 241.42861760062908,
      "y": 1692.6788946095808,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 115.40680385315082,
      "height": 15.648380183478077,
      "seed": 2118166380,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "Byte character/",
      "baseline": 12.648380183478077,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Byte character/"
    },
    {
      "type": "text",
      "version": 903,
      "versionNonce": 246006815,
      "isDeleted": false,
      "id": "L9YbCy0F-VSRxcd2ookSr",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 360.79081442658935,
      "y": 1691.8570829766809,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 69.11367914369484,
      "height": 15.648380183478077,
      "seed": 309164012,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "perror : ",
      "baseline": 12.648380183478077,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "perror : "
    },
    {
      "type": "text",
      "version": 870,
      "versionNonce": 1557877073,
      "isDeleted": false,
      "id": "d1zhj-QtMykQapChsaxrP",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 431.25606807397867,
      "y": 1693.4489185259445,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 397.7296629967345,
      "height": 15.648380183478077,
      "seed": 1197153772,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 13.040316819565064,
      "fontFamily": 3,
      "text": "Writes a description of the current error to stderr.",
      "baseline": 12.648380183478077,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Writes a description of the current error to stderr."
    },
    {
      "type": "text",
      "version": 1273,
      "versionNonce": 1849288767,
      "isDeleted": false,
      "id": "2D0eTaRmwbhCHsPf8LF1U",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 160.4003006631924,
      "y": 548.7163647459603,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 868.5375034078523,
      "height": 849.0926339285716,
      "seed": 1676110655,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 14.815138650880213,
      "fontFamily": 3,
      "text": "1. Operation not permitted: Sometimes while performing operations of file handling in C, \n    we try to read from a file or change permissions of a file by accessing it. If we don't have \n    ownership rights or system rights to access a file, then we get this particular error message.\n\n2. No such file or directory: This error message occurs whenever we try to access a file \n    or directory that doesn't exists. It also occurs when we specify wrong file destination path.\n\n3. No such process: When we perform some operations that are not supported during file \n    handling in C, it gives no such process error.\n\n4. Interrupted System call: If we try to read user's input and if there is no input present, \n    then the system calling process will not return any value and will be blocked forever. \n    This results in interrupted system calls.\n\n5. I/O error: I/O stands for input/output errors that occur when system is not able to perform \n    basic operations like reading from a file or copying data from one file to another.\n\n6. No such device or address: When we specify incorrect device path or address while opening \n    or accessing them, this error occurs.\n\nFor example: If we are trying to access a device driver using its path but in actual, \n    it has been removed from the system.\n\n7. Argument list too long: This error generally occurs when we work with large number of files.\n\nFor example: If we need to get count of no. of files in a directory (consisting of large number \n    of files) that starts with string - \"Scaler\", then due to limited buffer space it will \n    show an error message - \"Argument list too long\" as no. of files in that directory will \n    be equal to the arguments list.\n\n8. Exec format error: This error occurs when we try to execute a file that is not executable \n    or has an invalid executable-file format.\n\n9. Bad file number: This error occurs generally when we try to write to a file which is \n    opened for read-only purpose. \n\n10. No child process: If a process has no further sub-process or child process, then the \n    code returns -1 value and we get no child process error message.\n\n11. Try again: An attempt to create a process fails, when there are no more process slots \n    or not enough memory available. We then get try again error.\n\n12. Out of memory: This error occurs when there is not enough memory available to execute a process.\n\n13. Permission denied: This error occurs when we try to read from a file that is not opened. \n    It suggests that an attempt was made to access a file in a way that is incompatible with \n    the file's attributes.",
      "baseline": 846.0926339285716,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. Operation not permitted: Sometimes while performing operations of file handling in C, \n    we try to read from a file or change permissions of a file by accessing it. If we don't have \n    ownership rights or system rights to access a file, then we get this particular error message.\n\n2. No such file or directory: This error message occurs whenever we try to access a file \n    or directory that doesn't exists. It also occurs when we specify wrong file destination path.\n\n3. No such process: When we perform some operations that are not supported during file \n    handling in C, it gives no such process error.\n\n4. Interrupted System call: If we try to read user's input and if there is no input present, \n    then the system calling process will not return any value and will be blocked forever. \n    This results in interrupted system calls.\n\n5. I/O error: I/O stands for input/output errors that occur when system is not able to perform \n    basic operations like reading from a file or copying data from one file to another.\n\n6. No such device or address: When we specify incorrect device path or address while opening \n    or accessing them, this error occurs.\n\nFor example: If we are trying to access a device driver using its path but in actual, \n    it has been removed from the system.\n\n7. Argument list too long: This error generally occurs when we work with large number of files.\n\nFor example: If we need to get count of no. of files in a directory (consisting of large number \n    of files) that starts with string - \"Scaler\", then due to limited buffer space it will \n    show an error message - \"Argument list too long\" as no. of files in that directory will \n    be equal to the arguments list.\n\n8. Exec format error: This error occurs when we try to execute a file that is not executable \n    or has an invalid executable-file format.\n\n9. Bad file number: This error occurs generally when we try to write to a file which is \n    opened for read-only purpose. \n\n10. No child process: If a process has no further sub-process or child process, then the \n    code returns -1 value and we get no child process error message.\n\n11. Try again: An attempt to create a process fails, when there are no more process slots \n    or not enough memory available. We then get try again error.\n\n12. Out of memory: This error occurs when there is not enough memory available to execute a process.\n\n13. Permission denied: This error occurs when we try to read from a file that is not opened. \n    It suggests that an attempt was made to access a file in a way that is incompatible with \n    the file's attributes."
    },
    {
      "type": "text",
      "version": 907,
      "versionNonce": 417791793,
      "isDeleted": false,
      "id": "ldtYlwZ_dEJnWH8N9g4u3",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 108.60227921898837,
      "y": 72.85245217894499,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 968.0831776942048,
      "height": 113.8349063218311,
      "seed": 1085588031,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 15.567166676489716,
      "fontFamily": 3,
      "text": "\nWhen we call a function in C language, a variable is automatically initialized with a \nnumeric value and we can use that to identify the type of error if \n    encountered while writing the code. This variable is called errno value. \n    It is a global variable that is defined in errno.h header file. \nThere are a total of 13 errno values in C language and each errno has an error message associated with it.",
      "baseline": 110.8349063218311,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "\nWhen we call a function in C language, a variable is automatically initialized with a \nnumeric value and we can use that to identify the type of error if \n    encountered while writing the code. This variable is called errno value. \n    It is a global variable that is defined in errno.h header file. \nThere are a total of 13 errno values in C language and each errno has an error message associated with it."
    },
    {
      "type": "text",
      "version": 438,
      "versionNonce": 208701535,
      "isDeleted": false,
      "id": "QJ0yfxjN9ltFI_hSue7v3",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 493.2727818669308,
      "y": 55.92121885635572,
      "strokeColor": "#5f3dc4",
      "backgroundColor": "transparent",
      "width": 142.33577989613977,
      "height": 20.703386166711248,
      "seed": 1704167711,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 17.252821805592696,
      "fontFamily": 3,
      "text": "What is Errno?",
      "baseline": 16.703386166711248,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "What is Errno?"
    },
    {
      "type": "text",
      "version": 184,
      "versionNonce": 1193157759,
      "isDeleted": false,
      "id": "Tbp-DISobL_SyG3hI9E2W",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 411.43657298462074,
      "y": 1747.6621655272115,
      "strokeColor": "#5f3dc4",
      "backgroundColor": "transparent",
      "width": 282,
      "height": 20,
      "seed": 1258935295,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Methods of Error Handling in C",
      "baseline": 16,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Methods of Error Handling in C"
    },
    {
      "type": "text",
      "version": 804,
      "versionNonce": 1554228977,
      "isDeleted": false,
      "id": "s6AHPbXW0DckdHxuOLcIv",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 145.4700551274771,
      "y": 1789.27558628614,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 902.8161670918356,
      "height": 89.01004464285703,
      "seed": 214221713,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 14.532252186588893,
      "fontFamily": 3,
      "text": "If we do not keep a check on errors, then it may result in either termination for the program or \n    it may result in giving incorrect outputs. These errors can also change the logical flow of the code. \n    Therefore, it is very important for the programmers to keep an eye on the unchecked errors if present \n    in the code. Below are some funtional methods of error handling in C Library that are helpful while \n    performing file operations:",
      "baseline": 85.01004464285703,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "If we do not keep a check on errors, then it may result in either termination for the program or \n    it may result in giving incorrect outputs. These errors can also change the logical flow of the code. \n    Therefore, it is very important for the programmers to keep an eye on the unchecked errors if present \n    in the code. Below are some funtional methods of error handling in C Library that are helpful while \n    performing file operations:"
    },
    {
      "type": "text",
      "version": 241,
      "versionNonce": 1845705887,
      "isDeleted": false,
      "id": "n5ddLGK7IXwLWfpuU82bO",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 450.4722872703351,
      "y": 1930.2350589423913,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 104,
      "height": 20,
      "seed": 294052241,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "1. perror()",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. perror()"
    },
    {
      "type": "text",
      "version": 377,
      "versionNonce": 1414766801,
      "isDeleted": false,
      "id": "biYTc4H04g4PKo5wklmP0",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 161.43210869890623,
      "y": 1965.1067107281015,
      "strokeColor": "#343a40",
      "backgroundColor": "transparent",
      "width": 779.2310267857144,
      "height": 57.040484591013836,
      "seed": 1843305489,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 15.468605990783406,
      "fontFamily": 3,
      "text": "perror() function stands for print error and when called by the user, \nit displays a message describing about the most recent error that occured in the code.\nperror() function is contained in stdio.h header file.",
      "baseline": 53.040484591013836,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "perror() function stands for print error and when called by the user, \nit displays a message describing about the most recent error that occured in the code.\nperror() function is contained in stdio.h header file."
    },
    {
      "type": "text",
      "version": 182,
      "versionNonce": 80761023,
      "isDeleted": false,
      "id": "PKqrDxsI-JBjyxzHEXDMn",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 476.99572477033485,
      "y": 2045.078808942385,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 665548159,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Syntax:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Syntax:"
    },
    {
      "type": "text",
      "version": 339,
      "versionNonce": 732520113,
      "isDeleted": false,
      "id": "bASmAA5pGh4JZy1-e0cDb",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 456.33724262747774,
      "y": 3014.297558942383,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 855717297,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Syntax:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Syntax:"
    },
    {
      "type": "text",
      "version": 438,
      "versionNonce": 1160110303,
      "isDeleted": false,
      "id": "ig2MyLCVBfQL54s3ydeU8",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 479.59863870177287,
      "y": 4101.092641291592,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 2095079743,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Syntax:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Syntax:"
    },
    {
      "type": "text",
      "version": 507,
      "versionNonce": 1900830865,
      "isDeleted": false,
      "id": "FbAiCOOYSQi-VKYInhHrG",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 473.11667248449385,
      "y": 5090.84535789416,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 1159490559,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Syntax:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Syntax:"
    },
    {
      "type": "text",
      "version": 683,
      "versionNonce": 1943065663,
      "isDeleted": false,
      "id": "7c8nwui_9SndHXQ8uSvso",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 523.0821544354146,
      "y": 6229.197276998832,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 1375489343,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Syntax:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Syntax:"
    },
    {
      "type": "text",
      "version": 944,
      "versionNonce": 1668532543,
      "isDeleted": false,
      "id": "Tsu8XGeSM66NpGaTHwAO4",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 553.0776931569814,
      "y": 7384.077156569414,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 2060463281,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Syntax:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Syntax:"
    },
    {
      "type": "text",
      "version": 230,
      "versionNonce": 1533554769,
      "isDeleted": false,
      "id": "3JZ0uqVfYXcGm7QPStEgh",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 382.8271979846204,
      "y": 2085.9486471120263,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 272,
      "height": 39,
      "seed": 1599146495,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "void perror(const char *str1)\n",
      "baseline": 35,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "void perror(const char *str1)\n"
    },
    {
      "type": "text",
      "version": 361,
      "versionNonce": 313424191,
      "isDeleted": false,
      "id": "398D3gjd6DwivWVtjlkte",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 91.25911762747825,
      "y": 2123.8113703263125,
      "strokeColor": "#2b8a3e",
      "backgroundColor": "transparent",
      "width": 1027.2198660714284,
      "height": 74.25685778829602,
      "seed": 2101370431,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 15.232175956573546,
      "fontFamily": 3,
      "text": "Here, str1 is a string containing a custom message that is to be printed before the error message itself.\n\nUser-defined message is printed firstly, followed by a colon and then the error message is printed.\nWe can call perror() function even if no error has encountered and in that case, it will display 'No Error' message",
      "baseline": 71.25685778829602,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Here, str1 is a string containing a custom message that is to be printed before the error message itself.\n\nUser-defined message is printed firstly, followed by a colon and then the error message is printed.\nWe can call perror() function even if no error has encountered and in that case, it will display 'No Error' message"
    },
    {
      "type": "text",
      "version": 243,
      "versionNonce": 276823601,
      "isDeleted": false,
      "id": "DJogLGnd4YWbAnUCsNf-X",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 289.74126048462085,
      "y": 2231.573647112027,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 498,
      "height": 20,
      "seed": 1659661329,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "C Program to illustrate the use of perror() function:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "C Program to illustrate the use of perror() function:"
    },
    {
      "type": "text",
      "version": 408,
      "versionNonce": 908786015,
      "isDeleted": false,
      "id": "SmFe7CaFYDXey8dLbI9OV",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 263.1675997703353,
      "y": 3170.7700756834556,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 517,
      "height": 20,
      "seed": 1984727377,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "C Program to illustrate the use of strerror() function:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "C Program to illustrate the use of strerror() function:"
    },
    {
      "type": "text",
      "version": 570,
      "versionNonce": 1361252369,
      "isDeleted": false,
      "id": "6FJgVFKB01Qcc_5_z9OxZ",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 277.9661478160276,
      "y": 4187.524909516442,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 498,
      "height": 20,
      "seed": 64614257,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "C Program to illustrate the use of ferror() function:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "C Program to illustrate the use of ferror() function:"
    },
    {
      "type": "text",
      "version": 882,
      "versionNonce": 308442495,
      "isDeleted": false,
      "id": "PYAZXNkfIa4ZNYqqGlZLf",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 302.5797088969905,
      "y": 5239.820137159658,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 479,
      "height": 20,
      "seed": 1030995025,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "C Program to illustrate the use of feof() function:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "C Program to illustrate the use of feof() function:"
    },
    {
      "type": "text",
      "version": 1100,
      "versionNonce": 226808625,
      "isDeleted": false,
      "id": "ZIt2OqoKcHcUsfiCi_qK7",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 327.04507328776344,
      "y": 6310.04529283302,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 479,
      "height": 20,
      "seed": 346647089,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "C Program to illustrate the use of feof() function:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "C Program to illustrate the use of feof() function:"
    },
    {
      "type": "text",
      "version": 1353,
      "versionNonce": 360164913,
      "isDeleted": false,
      "id": "xlBlxUCXW5yf_GPQS3xWR",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 358.7811582090163,
      "y": 7486.944197564376,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 479,
      "height": 20,
      "seed": 2065363679,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "C Program to illustrate the use of feof() function:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "C Program to illustrate the use of feof() function:"
    },
    {
      "type": "text",
      "version": 1621,
      "versionNonce": 1363842289,
      "isDeleted": false,
      "id": "eSMpXMxTzOpp9k6s11sbC",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 407.692388667249,
      "y": 8524.628749119123,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 479,
      "height": 20,
      "seed": 1496526961,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "C Program to illustrate the use of feof() function:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "C Program to illustrate the use of feof() function:"
    },
    {
      "type": "text",
      "version": 368,
      "versionNonce": 1442079167,
      "isDeleted": false,
      "id": "vIioZppJ2-RgC6LGWealT",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 217.50911762747785,
      "y": 2270.8370399691694,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 649.703125,
      "height": 37.0444764254386,
      "seed": 1212165841,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "In this program with the help of perror() function, we are displaying an \n    error message when there is no file available naming \"test.txt\".",
      "baseline": 34.0444764254386,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In this program with the help of perror() function, we are displaying an \n    error message when there is no file available naming \"test.txt\"."
    },
    {
      "type": "text",
      "version": 716,
      "versionNonce": 2068503985,
      "isDeleted": false,
      "id": "Xq0TfK_8bRl72IaBD-set",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 269.7524211989062,
      "y": 3216.010031040598,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 516,
      "height": 54,
      "seed": 1378492689,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994973,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "In this program with the help of strerror() function, \nwe are displaying an error message using errno value when \n    there is no file available naming \"test.txt\".",
      "baseline": 51,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In this program with the help of strerror() function, \nwe are displaying an error message using errno value when \n    there is no file available naming \"test.txt\"."
    },
    {
      "type": "text",
      "version": 899,
      "versionNonce": 1503646175,
      "isDeleted": false,
      "id": "9U3mZy7dtRFeC4ApI0u5V",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 169.89806701397993,
      "y": 4239.548532113386,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 865,
      "height": 54,
      "seed": 824815377,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "In this program, we are trying to read data from the file but has opened the file \n    in the wrong access mode i.e, writing mode. Now, ferror() function will detect \n    this error in the file stream and using perror() function, we will display the error message.",
      "baseline": 51,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In this program, we are trying to read data from the file but has opened the file \n    in the wrong access mode i.e, writing mode. Now, ferror() function will detect \n    this error in the file stream and using perror() function, we will display the error message."
    },
    {
      "type": "text",
      "version": 1250,
      "versionNonce": 1852178321,
      "isDeleted": false,
      "id": "MIYLxogCVdz8v1qURep96",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 175.17594499201732,
      "y": 5286.672329220995,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 837,
      "height": 54,
      "seed": 1374793023,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "In this program, we are trying to read data from the file and to avoid printing \n    the garbage value characters, we are using feof() function. On detecting the end-of-file, \n    it will return a non-zero value and hence, breaks the loop.",
      "baseline": 51,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In this program, we are trying to read data from the file and to avoid printing \n    the garbage value characters, we are using feof() function. On detecting the end-of-file, \n    it will return a non-zero value and hence, breaks the loop."
    },
    {
      "type": "text",
      "version": 1512,
      "versionNonce": 407499871,
      "isDeleted": false,
      "id": "OvODSHLgIYjZR1x09nR3M",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 221.526446374359,
      "y": 6349.885092032158,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 810,
      "height": 72,
      "seed": 1956531551,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "In this program, we are trying to read data from the file but has opened the \n    file in the wrong access mode i.e, writing mode. Now, we will clear the error \n    indicators using clearerr() function from the file stream and hence, ferror() couldn't \n    then detect that error again.",
      "baseline": 69,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In this program, we are trying to read data from the file but has opened the \n    file in the wrong access mode i.e, writing mode. Now, we will clear the error \n    indicators using clearerr() function from the file stream and hence, ferror() couldn't \n    then detect that error again."
    },
    {
      "type": "text",
      "version": 1784,
      "versionNonce": 1640384863,
      "isDeleted": false,
      "id": "TTQh9fGYC005qz_ygVRHh",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 261.46876033323554,
      "y": 7525.612475282956,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 739,
      "height": 36,
      "seed": 241790609,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "In this program, we are illustrating the use of two exit function constant values: \nEXIT_SUCCESS and EXIT_FAILURE depending upon how the program code is terminated.",
      "baseline": 33,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In this program, we are illustrating the use of two exit function constant values: \nEXIT_SUCCESS and EXIT_FAILURE depending upon how the program code is terminated."
    },
    {
      "type": "text",
      "version": 2083,
      "versionNonce": 772419231,
      "isDeleted": false,
      "id": "F_S_y5iYq2LyTRPiTP4kb",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 275.1674022901226,
      "y": 8562.482540475034,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 792,
      "height": 36,
      "seed": 1797983007,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "In this program, we are keeping a check if in case we get zero number value for division \n    that can produce errors and can also abruptly terminate the program.",
      "baseline": 33,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In this program, we are keeping a check if in case we get zero number value for division \n    that can produce errors and can also abruptly terminate the program."
    },
    {
      "type": "text",
      "version": 1561,
      "versionNonce": 1623541009,
      "isDeleted": false,
      "id": "Y3rPeFqbE6TvyTXwt17iq",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 220.49182976224506,
      "y": 6813.950081875322,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 989,
      "height": 54,
      "seed": 1757280305,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 15.19773391812865,
      "fontFamily": 3,
      "text": "After opening the file in writing mode, we are trying to read data from it using fgetc() and therefore, \n    using ferror() function we can detect the error. After using clearerr() function, it will remove the \n    error in the file pointer stream and further, we won't get any error on checking through ferror() function.",
      "baseline": 51,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "After opening the file in writing mode, we are trying to read data from it using fgetc() and therefore, \n    using ferror() function we can detect the error. After using clearerr() function, it will remove the \n    error in the file pointer stream and further, we won't get any error on checking through ferror() function."
    },
    {
      "type": "text",
      "version": 285,
      "versionNonce": 1619884465,
      "isDeleted": false,
      "id": "JdVU3RrMXCzqDigdmFcJC",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 217.07943012747796,
      "y": 2340.0948524691694,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 740,
      "height": 315,
      "seed": 1851760561,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665904962237,
      "link": null,
      "locked": false,
      "fontSize": 15.783333333333337,
      "fontFamily": 3,
      "text": "#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n  \nint main(){\n    FILE* fp;\n    fp = fopen(\"test.txt\",\"r\");\n    \n    if(fp==NULL){          //Error handling in case if the file doesn't exists \n        perror(\"Message from perror \"); \n        //User-Defined message passed as an argument string in perror() function\n        return -1;\n    }\n    fclose(fp);\n    return 0;\n}\n",
      "baseline": 311,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n  \nint main(){\n    FILE* fp;\n    fp = fopen(\"test.txt\",\"r\");\n    \n    if(fp==NULL){          //Error handling in case if the file doesn't exists \n        perror(\"Message from perror \"); \n        //User-Defined message passed as an argument string in perror() function\n        return -1;\n    }\n    fclose(fp);\n    return 0;\n}\n"
    },
    {
      "type": "text",
      "version": 450,
      "versionNonce": 803863857,
      "isDeleted": false,
      "id": "6s3h3TImUCz0C8hu9WIt_",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 90.95777834176351,
      "y": 2679.8036275807754,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 975.0479910714284,
      "height": 37.53886638873222,
      "seed": 1049429055,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.400560569736284,
      "fontFamily": 3,
      "text": "We have declared a file pointer 'fp' and using it, we are trying to open \"test.txt\" file in read only mode. \n    If file doesn't exists i.e. fp is NULL, we call perror() function to print the error message.",
      "baseline": 34.53886638873222,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "We have declared a file pointer 'fp' and using it, we are trying to open \"test.txt\" file in read only mode. \n    If file doesn't exists i.e. fp is NULL, we call perror() function to print the error message."
    },
    {
      "type": "text",
      "version": 833,
      "versionNonce": 430205535,
      "isDeleted": false,
      "id": "u0CVgVht68k0Whe8ARDTX",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 147.25465334176374,
      "y": 3625.6071990093465,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 875,
      "height": 56,
      "seed": 1683878783,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.400560569736284,
      "fontFamily": 3,
      "text": "After opening the file in read only mode using file pointer fp, we check that if fp is NULL i.e. \nthe file doesn't exists and then we pass errno as parameter in strerror() function that will \n    print respective error message",
      "baseline": 52,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "After opening the file in read only mode using file pointer fp, we check that if fp is NULL i.e. \nthe file doesn't exists and then we pass errno as parameter in strerror() function that will \n    print respective error message"
    },
    {
      "type": "text",
      "version": 228,
      "versionNonce": 284503825,
      "isDeleted": false,
      "id": "HXsNR_M5xL96ajBttSQlD",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 504.5236265560492,
      "y": 2735.5311666432763,
      "strokeColor": "#862e9c",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 1710880753,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Output:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Output:"
    },
    {
      "type": "text",
      "version": 365,
      "versionNonce": 126207615,
      "isDeleted": false,
      "id": "Fg66IWU-m8hh3NLB74a7y",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 498.1899211989063,
      "y": 3704.878264857562,
      "strokeColor": "#862e9c",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 591597375,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Output:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Output:"
    },
    {
      "type": "text",
      "version": 631,
      "versionNonce": 1904157937,
      "isDeleted": false,
      "id": "SKfxBfftM6jO5v07FIEiF",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 525.275723385596,
      "y": 5835.039680203642,
      "strokeColor": "#862e9c",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 632820447,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Output:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Output:"
    },
    {
      "type": "text",
      "version": 856,
      "versionNonce": 1827278975,
      "isDeleted": false,
      "id": "88ub4xqSLSxu36--MQ5wx",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 570.415652571361,
      "y": 6892.1884246844875,
      "strokeColor": "#862e9c",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 1698626577,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Output:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Output:"
    },
    {
      "type": "text",
      "version": 1271,
      "versionNonce": 1000652817,
      "isDeleted": false,
      "id": "s4Xh92KV4NcjfQ9kLWJby",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 590.7879791312005,
      "y": 8166.457500471372,
      "strokeColor": "#862e9c",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 2048343807,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Output:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Output:"
    },
    {
      "type": "text",
      "version": 1568,
      "versionNonce": 837603025,
      "isDeleted": false,
      "id": "YkYJ4VTKIsdeKf4jnyCR3",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 588.2861526140837,
      "y": 9121.231803244907,
      "strokeColor": "#862e9c",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 2033580625,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Output:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Output:"
    },
    {
      "type": "text",
      "version": 482,
      "versionNonce": 37575857,
      "isDeleted": false,
      "id": "yqwk22TYB8nGRLcX5NS71",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 507.08873550664464,
      "y": 4699.167767848437,
      "strokeColor": "#862e9c",
      "backgroundColor": "transparent",
      "width": 67,
      "height": 20,
      "seed": 1515413553,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Output:",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Output:"
    },
    {
      "type": "text",
      "version": 257,
      "versionNonce": 1347994335,
      "isDeleted": false,
      "id": "I2X8YB2tmvsvenOQQ5muB",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 312.7937158417635,
      "y": 2770.5970846120254,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 478,
      "height": 59,
      "seed": 1774660927,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Assuming \"test.txt\" file doesn't exists: (Output):\n    Message from perror : No such file or directory\n",
      "baseline": 55,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Assuming \"test.txt\" file doesn't exists: (Output):\n    Message from perror : No such file or directory\n"
    },
    {
      "type": "text",
      "version": 434,
      "versionNonce": 280010385,
      "isDeleted": false,
      "id": "rdsthP2twBCkVi6G6_s3H",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 312.4477336989064,
      "y": 3740.585923897739,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 469,
      "height": 39,
      "seed": 1561858943,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "Assuming \"test.txt\" file doesn't exists: (Output):\n    Error: No such file or directory",
      "baseline": 35,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Assuming \"test.txt\" file doesn't exists: (Output):\n    Error: No such file or directory"
    },
    {
      "type": "text",
      "version": 564,
      "versionNonce": 119213823,
      "isDeleted": false,
      "id": "1Y6vPrkVhBa3cukr7qofP",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 335.1760801509472,
      "y": 4737.514139556728,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 441,
      "height": 78,
      "seed": 414894673,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": " File is opened in writing mode!\n Error Message from perror: Bad file descriptor\n Error in reading from the file!\n",
      "baseline": 74,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " File is opened in writing mode!\n Error Message from perror: Bad file descriptor\n Error in reading from the file!\n"
    },
    {
      "type": "text",
      "version": 675,
      "versionNonce": 1461757041,
      "isDeleted": false,
      "id": "c2OjyzvOvIBYpiSWbnDAb",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 327.7209216523479,
      "y": 5916.04360785092,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 535,
      "height": 20,
      "seed": 335584959,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": " Scaler Topic: Error Handling in C during File Operations",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " Scaler Topic: Error Handling in C during File Operations"
    },
    {
      "type": "text",
      "version": 881,
      "versionNonce": 987527921,
      "isDeleted": false,
      "id": "rO18YaJr0QeKT7AHC6-gN",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 441.42275081934554,
      "y": 7021.944381944133,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 319,
      "height": 59,
      "seed": 1330334079,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": " Error in reading from file!\n Error again in reading from file!\n",
      "baseline": 55,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " Error in reading from file!\n Error again in reading from file!\n"
    },
    {
      "type": "text",
      "version": 940,
      "versionNonce": 1265739935,
      "isDeleted": false,
      "id": "FXxL8JLkwJ6YAWKVZjBr3",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 471.935534076546,
      "y": 6932.895030099806,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 264,
      "height": 20,
      "seed": 1981082929,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": " Error in reading from file!",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " Error in reading from file!"
    },
    {
      "type": "text",
      "version": 1392,
      "versionNonce": 1309918591,
      "isDeleted": false,
      "id": "41iVnjUtCk8g1FJ85BuDh",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 409.05731275844107,
      "y": 8240.139646227539,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 478,
      "height": 39,
      "seed": 1207240479,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": " Error printed by perror: No such file or directory\n Value of errno: 2",
      "baseline": 35,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " Error printed by perror: No such file or directory\n Value of errno: 2"
    },
    {
      "type": "text",
      "version": 1650,
      "versionNonce": 1260978879,
      "isDeleted": false,
      "id": "snrNjXQQcj8Z2eAYV2ZdO",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 476.54552669409486,
      "y": 9164.63290806551,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 310,
      "height": 20,
      "seed": 1492799295,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": " Division by Zero is not allowed!",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": " Division by Zero is not allowed!"
    },
    {
      "type": "text",
      "version": 331,
      "versionNonce": 1433947665,
      "isDeleted": false,
      "id": "tqTCLGiorE8_nVgE40jd0",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 221.52697477033496,
      "y": 2834.1995539200616,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 650,
      "height": 36,
      "seed": 1832339071,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.195906432748545,
      "fontFamily": 3,
      "text": "Here, string - \"Message from perror\" is user-defined parameter passed in \n    the function that is printed before the actual error message.",
      "baseline": 33,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Here, string - \"Message from perror\" is user-defined parameter passed in \n    the function that is printed before the actual error message."
    },
    {
      "type": "text",
      "version": 522,
      "versionNonce": 394794879,
      "isDeleted": false,
      "id": "0EP2xi6Bc5ibwkuYuI4_3",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 158.7870194131923,
      "y": 3803.6917414200625,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 865,
      "height": 18,
      "seed": 734018943,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.195906432748545,
      "fontFamily": 3,
      "text": "As the file doesn't exists, we have printed errno-2 error message i.e. No such file or directory.",
      "baseline": 15,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "As the file doesn't exists, we have printed errno-2 error message i.e. No such file or directory."
    },
    {
      "type": "text",
      "version": 618,
      "versionNonce": 373711857,
      "isDeleted": false,
      "id": "gL6nZC_hxaCP41rcmXZGQ",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 166.56452030382513,
      "y": 4820.195523151805,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 802,
      "height": 18,
      "seed": 726790353,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.195906432748545,
      "fontFamily": 3,
      "text": "Here, we are printing error messages both user-defined and from perror() function as well.",
      "baseline": 15,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Here, we are printing error messages both user-defined and from perror() function as well."
    },
    {
      "type": "text",
      "version": 209,
      "versionNonce": 582406047,
      "isDeleted": false,
      "id": "gXzcbbrRL393S9QuK74zh",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 431.6943854846206,
      "y": 2901.554464634348,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 123,
      "height": 20,
      "seed": 928935473,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "2. strerror()",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "2. strerror()"
    },
    {
      "type": "text",
      "version": 344,
      "versionNonce": 613858769,
      "isDeleted": false,
      "id": "98JN7QNaExXlaMO1QJuI6",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 465.15917578720496,
      "y": 3856.02898509138,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 104,
      "height": 20,
      "seed": 1592283295,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "3. ferror()",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "3. ferror()"
    },
    {
      "type": "text",
      "version": 462,
      "versionNonce": 597263295,
      "isDeleted": false,
      "id": "0d6t_9g_deUov6XfZ-TLJ",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 459.17371153073395,
      "y": 4888.6147584926375,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 85,
      "height": 20,
      "seed": 921471441,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "4. feof()",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "4. feof()"
    },
    {
      "type": "text",
      "version": 627,
      "versionNonce": 475133137,
      "isDeleted": false,
      "id": "GRLl_grw9Iy7hQB6cgbNz",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 489.39626719739294,
      "y": 6034.2189534293375,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 123,
      "height": 20,
      "seed": 998130719,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "5. clearerr()",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "5. clearerr()"
    },
    {
      "type": "text",
      "version": 727,
      "versionNonce": 571774449,
      "isDeleted": false,
      "id": "QZTYaoid-bucBBmHwEAPt",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 525.0764744365248,
      "y": 7113.212134428339,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 132,
      "height": 20,
      "seed": 1817067217,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "6. Exit Status",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "6. Exit Status"
    },
    {
      "type": "text",
      "version": 904,
      "versionNonce": 434949297,
      "isDeleted": false,
      "id": "BtJF6M7vHQi8ZMiKhO8ZE",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 529.8492384463024,
      "y": 8327.238562175664,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 179,
      "height": 20,
      "seed": 100960305,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "7. Division by zero",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "7. Division by zero"
    },
    {
      "type": "text",
      "version": 362,
      "versionNonce": 787275775,
      "isDeleted": false,
      "id": "yGSIS6X1ScwkrzduwfXeE",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 164.72451941319196,
      "y": 2938.5054970004194,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 844,
      "height": 36,
      "seed": 1037753983,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.140274663677133,
      "fontFamily": 3,
      "text": "strerror() function is contained in string.h header file.\nIt takes 'errno' as an argument and returns the string error message of currently passed errno.",
      "baseline": 33,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "strerror() function is contained in string.h header file.\nIt takes 'errno' as an argument and returns the string error message of currently passed errno."
    },
    {
      "type": "text",
      "version": 543,
      "versionNonce": 718300017,
      "isDeleted": false,
      "id": "-LGvATwhoTtXtqIsxob6S",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 201.564407314527,
      "y": 3896.003658612034,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 781,
      "height": 180,
      "seed": 1294536991,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.140274663677133,
      "fontFamily": 3,
      "text": "ferror() function is contained in stdio.h header file.\n\nThis function basically checks for error in the file stream. \n    It returns zero value if there is no error or else, it returns \n    a positive non-zero value in case of error.\n\nFile pointer stream is passed as an argument to the function. \n    It will check for the error until the file is closed or we call clearerr() function.\n\nTo identify the type of error, we can further use perror() function.",
      "baseline": 177,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "ferror() function is contained in stdio.h header file.\n\nThis function basically checks for error in the file stream. \n    It returns zero value if there is no error or else, it returns \n    a positive non-zero value in case of error.\n\nFile pointer stream is passed as an argument to the function. \n    It will check for the error until the file is closed or we call clearerr() function.\n\nTo identify the type of error, we can further use perror() function."
    },
    {
      "type": "text",
      "version": 759,
      "versionNonce": 1936623647,
      "isDeleted": false,
      "id": "n5lyY-MSmf6hYx0ORw39T",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 208.3429485224226,
      "y": 4932.472188920284,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 745,
      "height": 144,
      "seed": 2054678257,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.140274663677133,
      "fontFamily": 3,
      "text": "feof() function is contained in stdio.h header file.\n\nThis function tests for end-of-file (eof indicator) for \n    the file pointer stream passed as an argument to the function.\n\nOn detecting that the end-of-file indicator associated with the file stream is set, \n    it returns a non-zero positive value or else, zero is returned.\n",
      "baseline": 141,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "feof() function is contained in stdio.h header file.\n\nThis function tests for end-of-file (eof indicator) for \n    the file pointer stream passed as an argument to the function.\n\nOn detecting that the end-of-file indicator associated with the file stream is set, \n    it returns a non-zero positive value or else, zero is returned.\n"
    },
    {
      "type": "text",
      "version": 992,
      "versionNonce": 26295487,
      "isDeleted": false,
      "id": "6Zmc-AZC4O7ZBje1FrAd4",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 266.0795229610453,
      "y": 6070.6846411820325,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 577,
      "height": 126,
      "seed": 352801265,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 15.140274663677133,
      "fontFamily": 3,
      "text": "clearerr() function is contained in stdio.h header file.\n\nThis function clears the end-of-file and the error indicators \n    from the file stream.\n\nError indicators are not automatically cleared and they continue \n    to return the errors until clearerr() function is called.",
      "baseline": 123,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "clearerr() function is contained in stdio.h header file.\n\nThis function clears the end-of-file and the error indicators \n    from the file stream.\n\nError indicators are not automatically cleared and they continue \n    to return the errors until clearerr() function is called."
    },
    {
      "type": "text",
      "version": 1303,
      "versionNonce": 664583583,
      "isDeleted": false,
      "id": "hHz9iTZijmJvy8zwQqk9f",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 267.09943039680866,
      "y": 7152.863244873408,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 736,
      "height": 198,
      "seed": 588889681,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 15.140274663677133,
      "fontFamily": 3,
      "text": "The macros of exit status() functional method are defined in stdlib.h header file. \n    They are used to inform calling function about the error.\n\nThere are two constant exit status values available for the exit() function: \n    EXIT_STATUS and EXIT_FAILURE.\n\nWhen program code comes out after a successful operation, then EXIT_SUCCESS is \n    used to show successful exit. Its value is defined as 0.\n\nWe use EXIT_FAILURE in case of failures or abrupt termination of the program. \n    Its value is defined as -1.",
      "baseline": 195,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "The macros of exit status() functional method are defined in stdlib.h header file. \n    They are used to inform calling function about the error.\n\nThere are two constant exit status values available for the exit() function: \n    EXIT_STATUS and EXIT_FAILURE.\n\nWhen program code comes out after a successful operation, then EXIT_SUCCESS is \n    used to show successful exit. Its value is defined as 0.\n\nWe use EXIT_FAILURE in case of failures or abrupt termination of the program. \n    Its value is defined as -1."
    },
    {
      "type": "text",
      "version": 1491,
      "versionNonce": 1637372639,
      "isDeleted": false,
      "id": "5MA8DBXfTsUoNyyYqgPB8",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 271.87219440658623,
      "y": 8366.889672620733,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 896,
      "height": 126,
      "seed": 814485343,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 15.140274663677133,
      "fontFamily": 3,
      "text": "If we divide a number by zero, C programming language will give warnings and also give runtime error.\n\nTo avoid such an undefined behaviour, there is no construct or method in C.\n\nTo avoid such situations, we can check the value of divisor before using it for division purposes. \n    This can be done using if-else conditions and whenever we encounter such a situation, \n    we can simply print error message.",
      "baseline": 123,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "If we divide a number by zero, C programming language will give warnings and also give runtime error.\n\nTo avoid such an undefined behaviour, there is no construct or method in C.\n\nTo avoid such situations, we can check the value of divisor before using it for division purposes. \n    This can be done using if-else conditions and whenever we encounter such a situation, \n    we can simply print error message."
    },
    {
      "type": "text",
      "version": 226,
      "versionNonce": 1372867679,
      "isDeleted": false,
      "id": "dUfchmSbvVSNicPc80cII",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 378.36849262747785,
      "y": 3056.0606030272047,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 245,
      "height": 20,
      "seed": 1234449777,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "char *strerror(int errnum)",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "char *strerror(int errnum)"
    },
    {
      "type": "text",
      "version": 341,
      "versionNonce": 497839377,
      "isDeleted": false,
      "id": "0ChhuffGrki2xYeDMg96H",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 399.9060785232374,
      "y": 4139.692577378908,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 235,
      "height": 20,
      "seed": 1266255711,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "int ferror(FILE *stream);",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "int ferror(FILE *stream);"
    },
    {
      "type": "text",
      "version": 455,
      "versionNonce": 862546047,
      "isDeleted": false,
      "id": "WMoE_xcyCnFWFHIXu_Bnw",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 401.0724739718879,
      "y": 5130.415983208225,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 217,
      "height": 20,
      "seed": 319274001,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "int feof(FILE *stream);",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "int feof(FILE *stream);"
    },
    {
      "type": "text",
      "version": 660,
      "versionNonce": 146617009,
      "isDeleted": false,
      "id": "gxdW19jiYtccT8EKBlCME",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 441.68252009949504,
      "y": 6267.0273561132135,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 254,
      "height": 20,
      "seed": 524534175,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "void clearerr(FILE *stream)",
      "baseline": 16,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "void clearerr(FILE *stream)"
    },
    {
      "type": "text",
      "version": 996,
      "versionNonce": 1003401169,
      "isDeleted": false,
      "id": "63lfhnKd0iwMXNEc2gN6L",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 413.32513174183487,
      "y": 7421.778926188304,
      "strokeColor": "#087f5b",
      "backgroundColor": "transparent",
      "width": 431,
      "height": 59,
      "seed": 52742975,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "exit(EXIT_SUCCESS);  //successful termination\nexit(EXIT_FAILURE); //unsuccessful termination\n",
      "baseline": 55,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "exit(EXIT_SUCCESS);  //successful termination\nexit(EXIT_FAILURE); //unsuccessful termination\n"
    },
    {
      "type": "text",
      "version": 358,
      "versionNonce": 35296447,
      "isDeleted": false,
      "id": "qHaw9uNYu0tYTSrHV2Rmw",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 239.73009977033485,
      "y": 3096.772447335241,
      "strokeColor": "#2b8a3e",
      "backgroundColor": "transparent",
      "width": 542.453125,
      "height": 37.5766818383659,
      "seed": 981169311,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 15.416074600355238,
      "fontFamily": 3,
      "text": "Here, errnum is the error number (errno value) using which, \n    respective error message will be displayed accordingly.",
      "baseline": 34.5766818383659,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Here, errnum is the error number (errno value) using which, \n    respective error message will be displayed accordingly."
    },
    {
      "type": "text",
      "version": 322,
      "versionNonce": 679978207,
      "isDeleted": false,
      "id": "9pIZnIpG_XShIAwlsIzsK",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 195.48344798462068,
      "y": 3301.2991632950616,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 741,
      "height": 312,
      "seed": 1711860351,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <errno.h>\n#include <stdio.h>\n#include <string.h>\n  \nint main(){\n    FILE* fp;\n    fp = fopen(\"test.txt\",\"r\");\n    \n    if(fp==NULL){          //Error handling in case if the file doesn't exists \n        printf(\"Error: %s\\n\",strerror(errno)); \n        //errno passed as an argument to display respective order error message\n    }\n    fclose(fp);\n    return 0;\n}\n",
      "baseline": 308,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <errno.h>\n#include <stdio.h>\n#include <string.h>\n  \nint main(){\n    FILE* fp;\n    fp = fopen(\"test.txt\",\"r\");\n    \n    if(fp==NULL){          //Error handling in case if the file doesn't exists \n        printf(\"Error: %s\\n\",strerror(errno)); \n        //errno passed as an argument to display respective order error message\n    }\n    fclose(fp);\n    return 0;\n}\n"
    },
    {
      "type": "text",
      "version": 575,
      "versionNonce": 1087954065,
      "isDeleted": false,
      "id": "uJ832KFA6PYvOrMUo29xg",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 232.79752315189563,
      "y": 4338.678353859587,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 741,
      "height": 332,
      "seed": 349032625,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <stdio.h>\n\nint main(){\n   FILE *fp;\n   fp = fopen(\"test.txt\",\"w\");\n\n   char ch = fgetc(fp);  //Trying to read data, despite of writing mode opened \n   if(ferror(fp)){      //Error detected in the file stream pointer\n      printf(\"File is opened in writing mode!\");\n      printf(\"\\nError in reading from the file!\");\n      perror(\"Error Message from perror\");\n      //Identifying the type of error using perror() function\n   }\n   fclose(fp);\n   return(0);\n}\n",
      "baseline": 328,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\n\nint main(){\n   FILE *fp;\n   fp = fopen(\"test.txt\",\"w\");\n\n   char ch = fgetc(fp);  //Trying to read data, despite of writing mode opened \n   if(ferror(fp)){      //Error detected in the file stream pointer\n      printf(\"File is opened in writing mode!\");\n      printf(\"\\nError in reading from the file!\");\n      perror(\"Error Message from perror\");\n      //Identifying the type of error using perror() function\n   }\n   fclose(fp);\n   return(0);\n}\n"
    },
    {
      "type": "text",
      "version": 936,
      "versionNonce": 2065543423,
      "isDeleted": false,
      "id": "KtzGEQa2GwtZAdq5CMaJH",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 251.01234547952464,
      "y": 5368.541734486977,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 778,
      "height": 449,
      "seed": 1094322737,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994974,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <stdio.h>\n#include <stdbool.h>\n\nint main(){\n   FILE *fp;\n   fp = fopen(\"test.txt\",\"r\");\n   if(fp==NULL){\n      perror(\"Message from perror\");\n      return -1;\n   }\n   while(true){\n      char ch = fgetc(fp); //Reading data from the file\n      if(feof(fp)){       \n      //On detecting the end-of-file, feof() function will return non-zero value   \n      //hence, it will break the loop\n         break;\n      }\n      printf(\"%c\",ch);\n   }\n   fclose(fp);\n   return 0;\n}\n",
      "baseline": 445,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\n#include <stdbool.h>\n\nint main(){\n   FILE *fp;\n   fp = fopen(\"test.txt\",\"r\");\n   if(fp==NULL){\n      perror(\"Message from perror\");\n      return -1;\n   }\n   while(true){\n      char ch = fgetc(fp); //Reading data from the file\n      if(feof(fp)){       \n      //On detecting the end-of-file, feof() function will return non-zero value   \n      //hence, it will break the loop\n         break;\n      }\n      printf(\"%c\",ch);\n   }\n   fclose(fp);\n   return 0;\n}\n"
    },
    {
      "type": "text",
      "version": 1145,
      "versionNonce": 1391021279,
      "isDeleted": false,
      "id": "JdB5cuSlrx30BD4Ajl4no",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 248.30956886878386,
      "y": 6466.928035083467,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 788,
      "height": 332,
      "seed": 956951505,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <stdio.h>\n\nint main(){\n   FILE *fp;\n   fp = fopen(\"test.txt\",\"w\");\n   char ch = fgetc(fp); //Trying to read data but the file is opened in writing mode\n   if(ferror(fp)) {    //ferror() will detect error in file pointer stream\n      printf(\"Error in reading from file!\");\n   }\n   clearerr(fp);      //clearerr() will clear error-indicators from the file stream\n   if(ferror(fp)){   //No error will be detected now\n      printf(\"Error again in reading from file!\");\n   }\n   fclose(fp);\n   return 0;\n}\n",
      "baseline": 328,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\n\nint main(){\n   FILE *fp;\n   fp = fopen(\"test.txt\",\"w\");\n   char ch = fgetc(fp); //Trying to read data but the file is opened in writing mode\n   if(ferror(fp)) {    //ferror() will detect error in file pointer stream\n      printf(\"Error in reading from file!\");\n   }\n   clearerr(fp);      //clearerr() will clear error-indicators from the file stream\n   if(ferror(fp)){   //No error will be detected now\n      printf(\"Error again in reading from file!\");\n   }\n   fclose(fp);\n   return 0;\n}\n"
    },
    {
      "type": "text",
      "version": 1520,
      "versionNonce": 831631807,
      "isDeleted": false,
      "id": "pjAlFqegAg-PXNSTxgjRm",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 295.1248088469344,
      "y": 7587.487913947412,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 759,
      "height": 468,
      "seed": 1188023345,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n  \nint main(){\n    FILE *fp;\n    fp = fopen (\"test.txt\",\"r\");\n    if(fp==NULL){\n        printf(\"Value of errno: %d\",errno);\n        perror(\"Error printed by perror\");\n        exit(EXIT_FAILURE); //Good practice to exit the program using exit status\n        printf(\"This message will not be printed!\"); \n        //This won't be printed due to exit above\n    }\n    else{\n        fclose (fp);\n        exit(EXIT_SUCCESS); //Successful exit from the program\n        printf(\"This message will not be printed!\"); \n        //This won't be printed due to exit above\n    }\n    return 0;\n}\n",
      "baseline": 464,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n  \nint main(){\n    FILE *fp;\n    fp = fopen (\"test.txt\",\"r\");\n    if(fp==NULL){\n        printf(\"Value of errno: %d\",errno);\n        perror(\"Error printed by perror\");\n        exit(EXIT_FAILURE); //Good practice to exit the program using exit status\n        printf(\"This message will not be printed!\"); \n        //This won't be printed due to exit above\n    }\n    else{\n        fclose (fp);\n        exit(EXIT_SUCCESS); //Successful exit from the program\n        printf(\"This message will not be printed!\"); \n        //This won't be printed due to exit above\n    }\n    return 0;\n}\n"
    },
    {
      "type": "text",
      "version": 1812,
      "versionNonce": 1626476177,
      "isDeleted": false,
      "id": "x2QtfMoB-8E422r6quwAF",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 365.0174311545908,
      "y": 8631.944975394528,
      "strokeColor": "#495057",
      "backgroundColor": "transparent",
      "width": 563,
      "height": 390,
      "seed": 204524415,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid division(int x){\n    if(x==0){ //Checking if divisor is zero, to avoid errors\n        printf(\"Division by Zero is not allowed!\");\n        exit(EXIT_FAILURE); //unsuccessful termination\n    }\n    else{\n        float fx = 10/x;\n        printf(\"f(x) is: %.5f\",fx);\n    }\n}\n  \nint main(){\n    int x = 0; \n    division(x); //Calling function to perform division\n    return 0;\n}\n",
      "baseline": 386,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid division(int x){\n    if(x==0){ //Checking if divisor is zero, to avoid errors\n        printf(\"Division by Zero is not allowed!\");\n        exit(EXIT_FAILURE); //unsuccessful termination\n    }\n    else{\n        float fx = 10/x;\n        printf(\"f(x) is: %.5f\",fx);\n    }\n}\n  \nint main(){\n    int x = 0; \n    division(x); //Calling function to perform division\n    return 0;\n}\n"
    },
    {
      "type": "text",
      "version": 290,
      "versionNonce": 1186381119,
      "isDeleted": false,
      "id": "Ia9DvNmzwt_7dnt4oSDBQ",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 184.9300148656921,
      "y": 5174.324297664377,
      "strokeColor": "#2b8a3e",
      "backgroundColor": "transparent",
      "width": 762.0384518159165,
      "height": 37.289209060000914,
      "seed": 859621297,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994975,
      "link": null,
      "locked": false,
      "fontSize": 15.298137050256782,
      "fontFamily": 3,
      "text": "Here, file pointer stream is passed as an argument and on detecting the end-of-file, \nthis function will return a non-zero positive value.",
      "baseline": 34.289209060000914,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Here, file pointer stream is passed as an argument and on detecting the end-of-file, \nthis function will return a non-zero positive value."
    },
    {
      "type": "text",
      "version": 199,
      "versionNonce": 1217051999,
      "isDeleted": false,
      "id": "BHFscyA4ZO5KneAeRvyvN",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 234.93685566936892,
      "y": 5871.922104615413,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 731.735876975486,
      "height": 19.00612667468795,
      "seed": 1038392113,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665896994975,
      "link": null,
      "locked": false,
      "fontSize": 15.204901339750357,
      "fontFamily": 3,
      "text": "Assuming there's some data present in the \"test.txt\" file, it will read and print:",
      "baseline": 16.00612667468795,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Assuming there's some data present in the \"test.txt\" file, it will read and print:"
    },
    {
      "type": "text",
      "version": 376,
      "versionNonce": 616936593,
      "isDeleted": false,
      "id": "PLh_1Rf0PbnFUqGwUIqs5",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 383.5983376172758,
      "y": 6983.5354405947755,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 446,
      "height": 18,
      "seed": 1499351473,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 15.204901339750357,
      "fontFamily": 3,
      "text": "In absence of clearerr() function, output will be:",
      "baseline": 15,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In absence of clearerr() function, output will be:"
    },
    {
      "type": "text",
      "version": 808,
      "versionNonce": 787123633,
      "isDeleted": false,
      "id": "Zw-c-_u0IQiXwy1C6STLp",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 360.0187916060428,
      "y": 8198.104566962173,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 553,
      "height": 18,
      "seed": 519637375,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 15.204901339750357,
      "fontFamily": 3,
      "text": "In case, if \"test.txt\" file doesn't exists: exit(EXIT_FAILURE)",
      "baseline": 15,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In case, if \"test.txt\" file doesn't exists: exit(EXIT_FAILURE)"
    },
    {
      "type": "text",
      "version": 1132,
      "versionNonce": 1964188127,
      "isDeleted": false,
      "id": "XDRTX7rzHwbioN5NPQCvZ",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 278.04623466633836,
      "y": 8074.810299144008,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 784,
      "height": 54,
      "seed": 2123062879,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897028132,
      "link": null,
      "locked": false,
      "fontSize": 15.204901339750357,
      "fontFamily": 3,
      "text": "After opening a file using file pointer fp, if it doesn't exists then we will \n    print the error messages and exit from the function (EXIT_FAILURE). If file exists, \n    then we will exit from the program by executing else condition here (EXIT_SUCCESS).",
      "baseline": 51,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "After opening a file using file pointer fp, if it doesn't exists then we will \n    print the error messages and exit from the function (EXIT_FAILURE). If file exists, \n    then we will exit from the program by executing else condition here (EXIT_SUCCESS)."
    },
    {
      "type": "text",
      "version": 1424,
      "versionNonce": 1776852735,
      "isDeleted": false,
      "id": "fWZoMTgIJvRh33IMkh49c",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 276.7605590195154,
      "y": 9043.308139261228,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 846,
      "height": 54,
      "seed": 1747518367,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 15.204901339750357,
      "fontFamily": 3,
      "text": "Here, we have passed the value x in division function. Using if condition we check if it is 0, \n    then we can't perform division using it. Using else condition, we divide 10 by x and then \n    print the resultant value.",
      "baseline": 51,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Here, we have passed the value x in division function. Using if condition we check if it is 0, \n    then we can't perform division using it. Using else condition, we divide 10 by x and then \n    print the resultant value."
    },
    {
      "type": "text",
      "version": 286,
      "versionNonce": 990533887,
      "isDeleted": false,
      "id": "_GAkDcjS-2Nk2UuCJOs2g",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 91.51017655135797,
      "y": 5965.624525064429,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 731,
      "height": 18,
      "seed": 1615094705,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897007765,
      "link": null,
      "locked": false,
      "fontSize": 15.204901339750357,
      "fontFamily": 3,
      "text": "In absence of feof() function, it will further print the garbage value characters.",
      "baseline": 15,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In absence of feof() function, it will further print the garbage value characters."
    },
    {
      "type": "text",
      "version": 134,
      "versionNonce": 2108953713,
      "isDeleted": false,
      "id": "Ndd2hhmO0zGWR4eXoi8_U",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 565.9064640967279,
      "y": 9220.61142089467,
      "strokeColor": "#364fc7",
      "backgroundColor": "transparent",
      "width": 118,
      "height": 24,
      "seed": 1917223583,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Conclusion",
      "baseline": 20,
      "textAlign": "center",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Conclusion"
    },
    {
      "type": "text",
      "version": 271,
      "versionNonce": 1989830431,
      "isDeleted": false,
      "id": "4W5BsKx2kyi33bXvy2GgU",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 121.37972413089324,
      "y": 9267.160719508604,
      "strokeColor": "#1864ab",
      "backgroundColor": "transparent",
      "width": 1163,
      "height": 156,
      "seed": 880491377,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1665897072614,
      "link": null,
      "locked": false,
      "fontSize": 16,
      "fontFamily": 3,
      "text": "In C language when we call a function, a variable called errno is assigned with a numeric value and we can \n    use that to identify the type of error if encountered while writing the code.\n\nWhen we perform operations of file handling in C, there are some common errors that we may encounter such \n    as reading a file that doesn't even exists or using a file that has not been opened.\n\nTo avoid errors while performing file operations, we have some helpful functional methods for error handling in C language: \n                           perror(), strerror(), ferror(), feof(), clearerr() and Exit status.",
      "baseline": 152,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "In C language when we call a function, a variable called errno is assigned with a numeric value and we can \n    use that to identify the type of error if encountered while writing the code.\n\nWhen we perform operations of file handling in C, there are some common errors that we may encounter such \n    as reading a file that doesn't even exists or using a file that has not been opened.\n\nTo avoid errors while performing file operations, we have some helpful functional methods for error handling in C language: \n                           perror(), strerror(), ferror(), feof(), clearerr() and Exit status."
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}